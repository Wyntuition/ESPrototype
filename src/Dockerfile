# This has the SDK installed; I don't think it used to. 
#FROM microsoft/dotnet:latest
# I am not sure what is unique to this image vs the one above
FROM microsoft/dotnet:1.0.0-preview2-sdk

# set up package cache
RUN curl -o /tmp/packagescache.tar.gz https://dist.asp.net/packagecache/aspnetcore.packagecache-1.0.1-debian.8-x64.tar.gz && \
   mkdir /packagescache && cd /packagescache && \
   tar xvf /tmp/packagescache.tar.gz && \
   rm /tmp/packagescache.tar.gz && \
   cd /

# set env var for packages cache
ENV DOTNET_HOSTING_OPTIMIZATION_CACHE /packagescache

# set up network
EXPOSE 5000/tcp
ENV ASPNETCORE_URLS http://*:5000
ENV ASPNETCORE_ENVIRONMENT "Development"
#ENV ASPNETCORE_URLS http://+:80

ADD . /eesa
WORKDIR /eesa

RUN ["dotnet", "restore"]
RUN ["dotnet", "build"]
ENTRYPOINT ["dotnet", "watch", "run"]

# USAGE - build image, and expose ports, the current app folder: 
# 		docker build -t mydemos:aspnetcorehelloworld .
#		docker run -d -p 8080:5000 -v $(pwd):/app -t mydemos:aspnetcorehelloworld 

# REFERENCE: https://github.com/aspnet/aspnet-docker/blob/master/1.0.1/jessie/product/Dockerfile



# FOR MULTIPLE CONTAINERS
# docker build -f aspnetcore.development.dockerfile -t [yourDockerHubID]/dotnet:1.0.0 

# Option 1
# Start PostgreSQL and ASP.NET Core (link ASP.NET core to ProgreSQL container with legacy linking)
 
# docker run -d --name my-postgres -e POSTGRES_PASSWORD=password postgres
# docker run -d -p 5000:5000 --link my-postgres:postgres [yourDockerHubID]/dotnet:1.0.0

# Option 2: Create a custom bridge network and add containers into it

# docker network create --driver bridge isolated_network
# docker run -d --net=isolated_network --name postgres -e POSTGRES_PASSWORD=password postgres
# docker run -d --net=isolated_network --name aspnetcoreapp -p 5000:5000 [yourDockerHubID]/dotnet:1.0.0